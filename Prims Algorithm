#include<iostream>
#include<vector>
using namespace std;

class graph
{
    public:
    int e, v, wt = 0, dis;
    int m[10][10];
    vector<int> start, final, edge;

    graph() {}

    graph(int x, int y)
    {
        e = x;
        v = y;
        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
                m[i][j] = 0;

        for (int i = 0; i < v; i++)
        {
            start.push_back(1);
            final.push_back(-1);
        }
    }

    void edges()
    {
        int st, end;
        for (int i = 0; i < e; i++)
        {
            cout << "Enter starting vertex: ";
            cin >> st;
            cout << "Enter ending vertex: ";
            cin >> end;
            cout << "Enter distance between them: ";
            cin >> dis;

            m[st][end] = dis;
            m[end][st] = dis;
        }
    }

    void Display()
    {
        cout << "\nAdjacency Matrix:\n";
        for (int i = 0; i < v; i++)
        {
            for (int j = 0; j < v; j++)
                cout << m[i][j] << " ";
            cout << endl;
        }
    }

    void prims()
    {
        start[0] = -1;
        final[0] = 1;

        for (int i = 0; i < v - 1; i++)
        {
            int min = 999;
            int parent = -1, child = -1;

            for (int j = 0; j < v; j++)
            {
                if (final[j] == 1)
                {
                    for (int k = 0; k < v; k++)
                    {
                        if (m[j][k] != 0 && final[k] != 1 && m[j][k] < min)
                        {
                            min = m[j][k];
                            parent = j;
                            child = k;
                        }
                    }
                }
            }

            if (child != -1)
            {
                final[child] = 1;
                start[child] = -1;
                edge.push_back(parent);
                edge.push_back(child);
                edge.push_back(min);
                wt += min;
            }
        }

        cout << "\nWeight of Minimum Spanning Tree: " << wt << endl;
        for (int i = 0; i < edge.size(); i += 3)
        {
            cout << "Edge from " << edge[i] << " to " << edge[i+1] << " with weight " << edge[i+2] << endl;
        }
    }
};

int main()
{
    int e, v;
    cout << "Enter total vertices: ";
    cin >> v;
    cout << "Enter total edges: ";
    cin >> e;

    graph g(e, v);
    g.edges();
    g.Display();
    g.prims();

    return 0;
}
